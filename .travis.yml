dist: focal
language: php

services:
  - mysql

php:
  - 8.1

cache:
  yarn: true
  directories:
    # Cache composer packages so "composer install" is faster.
    - $HOME/.composer/cache/files
    # Cache the directory where Symfony stores its slightly modified version of PHPUnit.
    - ./bin/.phpunit
    # Cache the Symfony binary's directory so that it does not have to be reinstalled.
    - $HOME/.symfony

env:
  global:
    - SYMFONY_PHPUNIT_DIR=./bin/.phpunit
    - SYMFONY_DEPRECATIONS_HELPER=9
    - ACTION="install"
    - PATH="$HOME/.symfony/bin:$PATH"
    - DATABASE_URL="mysql://user:user@127.0.0.1/test?charset=utf8"
    - TEST_SERVER="http://localhost:8080"

# Make sure we have a recent version of docker-compose.
addons:
  apt:
    packages:
      - docker-compose

before_script:
  # Ensure the PHP environment is ready.
  - phpenv config-rm xdebug.ini || true
  - phpenv rehash

  # Install the AWS CLI and login to the ECR. Credentials are secrets set via the UI.
  - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
  - aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin public.ecr.aws/unocha

  # Change minimum-stability to allow upcoming versions (dev | alpha | beta | RC)
  - '[[ -z $STABILITY ]] || composer config minimum-stability "$STABILITY"'
  # Change extra.symfony.require used by symfony flex
  - '[[ -z $SYMFONY ]] || composer config extra.symfony.require "$SYMFONY"'

  # Composerify.
  - composer install --no-scripts

  # If it is available update the Symfony binary, if not install it.
  - if symfony self:version; then symfony self:update --yes ; else wget https://get.symfony.com/cli/installer -O - | bash ; fi
  # Add the local security checker.
  - curl -L -o ./bin/local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64
  - chmod +x ./bin/local-php-security-checker

script:
  # Setup tests
  - mysql -e "CREATE DATABASE test;"
  - mysql -e "CREATE USER user@127.0.0.1 IDENTIFIED BY 'user';"
  - mysql -e "GRANT ALL ON test.* to user@127.0.0.1;"

  - ./bin/console doctrine:database:drop --force
  - ./bin/console doctrine:database:create --if-not-exists -n
  - ./bin/console doctrine:schema:create -n
  - ./bin/console hautelook:fixtures:load -n
  - ./bin/console cache:clear

  # Valid composer.json?
  - composer validate --no-check-version --strict
  # This checks that the YAML config files contain no syntax errors.
  - ./bin/console lint:yaml config --parse-tags
  # This checks that the Twig template files contain no syntax errors.
  - ./bin/console lint:twig templates --env=prod
  # This checks that the XLIFF translations contain no syntax errors.
  - ./bin/console lint:xliff translations
  # This checks that arguments injected into services match type declarations.
  - ./bin/console lint:container
  # This checks that the application doesn't use dependencies with known security vulnerabilities.
  # - symfony check:security
  - ./bin/local-php-security-checker
  # This checks that Doctrine's mapping configurations are valid.
  - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction

  # PHP linting
  - find -L ./src -iregex '.*\.php$' -print0 | xargs -0 -n 1 -P 4 php -l

  # Start server
  - php -S localhost:8080 -t public/ &

  # Run tests
  - ./bin/phpunit

after_success:
  - killall -9 php
  - echo "The tests completed without errors."

after_failure:
  - echo "The tests failed. Please check the output above for problems."
